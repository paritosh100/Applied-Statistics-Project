# ========================= 1 ==================================================
library(tidyverse)
library(alr4)
library(caret)
# (b) Implement polynomial regression models with degrees from 1 to 4.
degrees <- 1:4
cv_r2_values <- numeric(length(degrees))
for (degree in degrees) {
# Fit polynomial regression model
model <- lm(eruptions ~ poly(waiting, degree), data = faithful)
# (c) Use 10-fold cross-validation to compute R2 values for each model.
cv_r2 <- cv.glm(data = faithful, glmfit = model, K = 10)$delta[1]
cv_r2_values[degree] <- cv_r2
}
library(glmnet)
for (degree in degrees) {
# Fit polynomial regression model
model <- lm(eruptions ~ poly(waiting, degree), data = faithful)
# (c) Use 10-fold cross-validation to compute R2 values for each model.
cv_r2 <- cv.glm(data = faithful, glmfit = model, K = 10)$delta[1]
cv_r2_values[degree] <- cv_r2
}
# a : load the dataset
library(glmnet)
for (degree in degrees) {
# Fit polynomial regression model
model <- lm(eruptions ~ poly(waiting, degree), data = faithful)
# (c) Use 10-fold cross-validation to compute R2 values for each model.
cv_r2 <- cv.glm(data = faithful, glmfit = model, K = 10)$delta[1]
cv_r2_values[degree] <- cv_r2
}
# ======================== 3 ====================================
# (a) load the faithful dataset in r
library(boot)
for (degree in degrees) {
# Fit polynomial regression model
model <- lm(eruptions ~ poly(waiting, degree), data = faithful)
# (c) Use 10-fold cross-validation to compute R2 values for each model.
cv_r2 <- cv.glm(data = faithful, glmfit = model, K = 10)$delta[1]
cv_r2_values[degree] <- cv_r2
}
# (d) Identify the degree that corresponds to the highest average crossvalidated R2 value.
best_degree <- which.max(cv_r2_values)
best_avg_r2 <- max(cv_r2_values)
# Print the results
cat("Best-fitting polynomial regression model:\n")
cat("Degree:", best_degree, "\n")
cat("Average Cross-validated R^2:", best_avg_r2, "\n")
best_degree
best_avg_r2
